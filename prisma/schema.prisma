// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum GameMode {
  NORMAL
  TOURNAMENT
}

enum BracketStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum GameStatus {
  WAITING_FOR_MORE_USERS
  IN_PROGRESS
  FINISHED
}

model Player {
  id                      String                @id @default(cuid())
  username                String                @unique
  firstname               String
  lastname                String
  createdAt               DateTime              @default(now())
  password                String
  gamesWon                Int                   @default(0)
  gamesPlayed             Int                   @default(0)
  playedGames             Game[]                @relation(name: "PlayerToGame")
  tournaments             Tournament[]          @relation(name: "PlayerToTournament")
  won_tournament_brackets Bracket[]             @relation(name: "Bracket_Winner_To_User")
  tournament_brackets     Bracket[]             @relation(name: "Bracket_To_User")
  tournamentStatistic     TournamentStatistic[] @relation(name: "PlayerToTournamentStatistic")
  gameMoveHistory         Move[]                @relation(name: "MoveToPlayer")
}

// ! At active game status that shows if the game is running or if the game is waiting for more user to join
model Game {
  id        String     @id @default(cuid())
  gameMode  GameMode   @default(NORMAL)
  createdAt DateTime   @default(now())
  endedAt   DateTime?
  status    GameStatus
  player    Player[]   @relation(name: "PlayerToGame")
  bracket   Bracket?   @relation(name: "BracketToGame", fields: [bracketId], references: [id])
  bracketId String?
  moves     Move[]     @relation(name: "MoveToGame")
}

model Tournament {
  id                  String                @id @default(cuid())
  name                String                @unique
  createdAt           DateTime              @default(now())
  endedAt             DateTime?
  isCompleted         Boolean               @default(false)
  players             Player[]              @relation(name: "PlayerToTournament")
  brackets            Bracket[]             @relation(name: "BracketToTournament")
  tournamentStatistic TournamentStatistic[] @relation(name: "TournamentToTournamentStatistic")
}

model Bracket {
  id        String        @id @default(cuid())
  round     Int
  status    BracketStatus @default(PENDING)
  createdAt DateTime      @default(now())

  Tournament   Tournament @relation(name: "BracketToTournament", fields: [tournamentId], references: [id])
  tournamentId String
  games        Game[]     @relation(name: "BracketToGame")

  winner   Player? @relation("Bracket_Winner_To_User", fields: [winnerId], references: [id])
  winnerId String?

  opponents Player[] @relation(name: "Bracket_To_User")
}

model TournamentStatistic {
  id            String     @id @default(cuid())
  player        Player     @relation(name: "PlayerToTournamentStatistic", fields: [playerId], references: [id])
  playerId      String
  tournament    Tournament @relation(name: "TournamentToTournamentStatistic", fields: [tournamentId], references: [id])
  tournamentId  String
  gamesPlayed   Int        @default(0)
  wins          Int        @default(0)
  losses        Int        @default(0)
  winPercentage Float      @default(0)
}

model Move {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  player    Player   @relation(name: "MoveToPlayer", fields: [playerId], references: [id])
  playerId  String
  game      Game     @relation(name: "MoveToGame", fields: [gameId], references: [id])
  gameId    String
  action    String   @db.VarChar(256)
  reason    String?  @db.VarChar(256)
  compliant Boolean  @default(true)
}
