// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum GameMode {
  NORMAL
  TOURNAMENT
}

enum MatchStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum GameStatus {
  WAITING_FOR_MORE_PLAYERS
  FULL
  IN_PROGRESS
  FINISHED
}

model Player {
  id                     String                @id @default(cuid())
  username               String                @unique
  firstname              String
  lastname               String
  createdAt              DateTime              @default(now())
  password               String
  gamesWon               Int                   @default(0)
  gamesPlayed            Int                   @default(0)
  playedGames            Game[]                @relation(name: "PlayerToGame")
  tournaments            Tournament[]          @relation(name: "PlayerToTournament")
  won_tournament_matches Match[]               @relation(name: "Match_Winner_To_User")
  tournament_matches     Match[]               @relation(name: "Match_To_User")
  tournamentStatistic    TournamentStatistic[] @relation(name: "PlayerToTournamentStatistic")
  wonGames               Game[]                @relation(name: "Game_Winner_To_User")
  wonTournaments         Tournament[]          @relation(name: "Tournament_Winner_To_User")
  hostedTournaments      Tournament[]          @relation(name: "Tournament_To_Host")
}

// Todo add winner
model Game {
  id          String     @id @default(cuid())
  gameMode    GameMode   @default(NORMAL)
  createdAt   DateTime   @default(now())
  endedAt     DateTime?
  status      GameStatus
  roomSize    Int // Limits how many players can join the game
  playerCount Int // Stores number of players that already joined
  private     Boolean    @default(false)
  players     Player[]   @relation(name: "PlayerToGame")
  match       Match?     @relation(name: "MatchToGame", fields: [matchId], references: [id])
  matchId     String?
  moveHistory Json
  winner      Player?    @relation(name: "Game_Winner_To_User", fields: [winnerId], references: [id])
  winnerId    String?
}

model Tournament {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  endedAt             DateTime?
  status              GameStatus
  currentSize         Int
  isCompleted         Boolean               @default(false)
  currentRound        Int                   @default(0)
  bestOf              Int                   @default(5) // number of rounds in a match (Best of 5, Best of 3)
  host                Player                @relation(name: "Tournament_To_Host", fields: [hostId], references: [id])
  hostId              String
  players             Player[]              @relation(name: "PlayerToTournament")
  matches             Match[]               @relation(name: "MatchToTournament")
  tournamentStatistic TournamentStatistic[] @relation(name: "TournamentToTournamentStatistic")
  winner              Player?               @relation(name: "Tournament_Winner_To_User", fields: [winnerId], references: [id])
  winnerId            String?
}

model Match {
  id        String      @id @default(cuid())
  round     Int
  status    MatchStatus @default(PENDING)
  createdAt DateTime    @default(now())

  Tournament   Tournament @relation(name: "MatchToTournament", fields: [tournamentId], references: [id])
  tournamentId String
  games        Game[]     @relation(name: "MatchToGame")

  winner   Player? @relation(name: "Match_Winner_To_User", fields: [winnerId], references: [id])
  winnerId String?

  opponents Player[] @relation(name: "Match_To_User")
}

model TournamentStatistic {
  id            String     @id @default(cuid())
  player        Player     @relation(name: "PlayerToTournamentStatistic", fields: [playerId], references: [id])
  playerId      String
  tournament    Tournament @relation(name: "TournamentToTournamentStatistic", fields: [tournamentId], references: [id])
  tournamentId  String
  gamesPlayed   Int        @default(0)
  wins          Int        @default(0)
  losses        Int        @default(0)
  winPercentage Float      @default(0)
}
